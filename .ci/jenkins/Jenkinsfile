@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'ubuntu'
    }
    options {
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
        skipDefaultCheckout()
    }
    stages {
        stage("Build&Test") {
            List buildParams = []
            buildParams.add(string(name: "DISPLAY_NAME", value: "PR #${CHANGE_ID} - ${image}: ${CHANGE_URL}"))
            buildParams.add(string(name: "CHANGE_ID", value: CHANGE_ID))
            buildParams.add(string(name: "CHANGE_URL", value: CHANGE_URL))
            buildParams.add(string(name: 'SOURCE_AUTHOR', value: getChangeAuthor()))
            buildParams.add(string(name: 'SOURCE_BRANCH', value: getChangeBranch()))
            buildParams.add(string(name: 'TARGET_BRANCH', value: getChangeTarget()))
            buildParams.add(string(name: 'BUILD_KOGITO_APPS_REF', value: getChangeTarget()))
            
            // Keep executing so we can cancel all if needed
            def job = build(job: "${getRepoName()}.build-and-test", wait: true, parameters: buildParams, propagate: false)
            if (job.result != 'SUCCESS') {
                if (job.result == 'UNSTABLE') {
                    unstable("Tests on images seems to have failed: ${job.absoluteUrl}")
                } else {
                    error("Error building images. Please check the logs of the job: ${job.absoluteUrl}")
                }
            }
        }
    }
}

String getChangeAuthor() {
    return CHANGE_AUTHOR
}

String getChangeBranch() {
    return CHANGE_BRANCH
}

String getChangeTarget() {
    return CHANGE_TARGET
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthorCredentialsId() {
    return env.AUTHOR_CREDS_ID
}
